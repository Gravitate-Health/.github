name: GH Build pipeline

on:
  workflow_call:
    secrets:
      REGISTRY_TOKEN:
        required: true
      REGISTRY_USERNAME:
        required: true
      KUBECONFIG_DEV:
        required: true

env:
  REGISTRY_URL: gravitate-registry.cr.de-fra.ionos.com
concurrency: production

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    steps:
      - id: string # Lowercase repo name
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.event.repository.name }}
      - id: setup-environment
        run: |
          echo "ðŸ”Ž The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}, with name ${{ github.event.repository.name }}"
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "environment=prod">> $GITHUB_OUTPUT
          else
            echo "environment=dev">> $GITHUB_OUTPUT
          fi

          echo "image=${{ env.REGISTRY_URL }}/${{ steps.string.outputs.lowercase }}" >> $GITHUB_OUTPUT
    outputs:
      image: ${{ steps.setup-environment.outputs.image }}
      environment: ${{ steps.setup-environment.outputs.environment }}

  semantic-versioning-dry-run:
    needs: [setup-environment]
    if: ${{ !github.event.act && needs.setup-environment.outputs.environment == 'prod' }}
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: Minor version for each merge
        id: taggerDryRun
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DRY_RUN: true
      - name: Print tags
        run: |
          echo "New tag is: ${{ steps.taggerDryRun.outputs.new_tag }}"
          echo "Current tag is: ${{ steps.taggerDryRun.outputs.tag }}"
          echo "Increment type is: ${{ steps.taggerDryRun.outputs.part }}"
    outputs:
      new-tag: ${{ steps.taggerDryRun.outputs.new_tag }}
      current-tag: ${{ steps.taggerDryRun.outputs.tag }}
      increment-type: ${{ steps.taggerDryRun.outputs.part }}
  docker:
    needs: [setup-environment, semantic-versioning-dry-run]
    if: always()
    env:
      ENVIRONMENT: ${{ needs.setup-environment.outputs.environment || 'dev' }}
      TAG: ${{ needs.semantic-versioning-dry-run.outputs.new-tag || 'latest' }}
      IMAGE: ${{ needs.setup-environment.outputs.image }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to GH registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build - dev
        uses: docker/build-push-action@v4
        if: ${{ env.ENVIRONMENT != 'prod' }}
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.IMAGE }}:dev
      - name: Build and Push image to registry - prod
        uses: docker/build-push-action@v4
        if: ${{ env.ENVIRONMENT == 'prod' }}
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE }}:latest , ${{ env.IMAGE }}:${{ env.TAG }}
  security-scan-trivy:
    runs-on: ubuntu-latest
    if: ${{ needs.setup-environment.outputs.environment == 'prod'}}
    needs: [setup-environment, docker]
    env:
      TAG: ${{ needs.semantic-versioning-dry-run.outputs.new-tag || 'latest' }}
      IMAGE: ${{ needs.setup-environment.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Login to GH registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Trivy security scans local
        if: ${{ env.ACT }} # Run only locally
        run: |
          export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          echo $TRIVY_VERSION
          wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
          ./trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --severity HIGH,CRITICAL ${{ env.IMAGE }}:${{ env.TAG }}
      - name: Trivy security scans production
        if: ${{ !env.ACT }} # Run only in production
        run: |
          export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          echo $TRIVY_VERSION
          wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
          ./trivy image --cache-dir .trivycache/ --scanners vuln --no-progress --severity HIGH,CRITICAL --format template --template "@contrib/html.tpl" -o container-scanning-report.html ${{ env.IMAGE }}:${{ env.TAG }}
          ./trivy image --cache-dir .trivycache/ --scanners secret --no-progress --severity HIGH,CRITICAL --format template --template "@contrib/html.tpl" -o secrets-scanning-report.html ${{ env.IMAGE }}:${{ env.TAG }}
          ./trivy image --cache-dir .trivycache/ --scanners config --no-progress --severity HIGH,CRITICAL --format template --template "@contrib/html.tpl" -o misconfigurations-scanning-report.html ${{ env.IMAGE }}:${{ env.TAG }}
      - name: Upload artifacts from trivy scanning
        if: ${{ !env.ACT }} # Run only in production
        uses: actions/upload-artifact@v3
        with:
          name: trivy-vuln-report
          path: ./*-scanning-report.html
  semantic-versioning:
    runs-on: ubuntu-latest
    if: ${{ !github.event.act && needs.setup-environment.outputs.environment == 'prod'}}
    needs: docker
    steps:
      - id: checkout
        uses: actions/checkout@v2
      - name: Minor version for each merge
        id: taggerFinal
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true

  deployment-dev:
    runs-on: ubuntu-latest
    if: ${{ !github.event.act && needs.setup-environment.outputs.environment == 'dev'}}
    needs: docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          kubeconfig: ${{ secrets.KUBECONFIG_DEV }}

      #- name: Check for changes in YAML files
      #  run: |
      #    # Script to detect changes in YAML files
      #    # Example: kubectl apply --dry-run=client -o yaml -f <path-to-yaml>
      #    kubectl apply --validate=false --dry-run=client -o yaml -k kubernetes/dev

      #- name: Apply Kubernetes manifests
      #  run: |
      #    # Apply YAML files if changes detected
      #    # Example: kubectl apply -f path/to/your/manifests

      - name: Restart Deployment
        run: |
            echo "$KUBE_CONFIG_DATA" | base64 --decode > kubeconfig
            export KUBECONFIG=$(pwd)/kubeconfig
            echo " Restarting deployment ${{ github.event.repository.name }} in development environment"
            kubectl rollout restart deployment ${{ github.event.repository.name }}
